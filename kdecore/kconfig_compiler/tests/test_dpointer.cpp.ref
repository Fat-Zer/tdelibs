// This file is generated by kconfig_compiler from test_dpointer.kcfg.
// All changes you do to this file will be lost.

#include "test_dpointer.h"

#include <klocale.h>

#include <kstaticdeleter.h>

class TestDPointerPrivate
{
  public:

    // General
    bool autoSave;
    int autoSaveInterval;
    bool confirm;
    TQString archiveFile;
    int destination;

    // Views
    int hourSize;
    bool selectionStartsEditor;

    // KOrganizer Plugins
    TQStringList selectedPlugins;

    // Colors
    TQColor highlightColor;
    TQColor agendaBgColor;

    // Fonts
    TQFont timeBarFont;

    // items
    KConfigSkeleton::ItemBool *autoSaveItem;
    KConfigSkeleton::ItemInt *autoSaveIntervalItem;
    KConfigSkeleton::ItemBool *confirmItem;
    KConfigSkeleton::ItemString *archiveFileItem;
    KConfigSkeleton::ItemEnum *destinationItem;
    KConfigSkeleton::ItemInt *hourSizeItem;
    KConfigSkeleton::ItemBool *selectionStartsEditorItem;
    KConfigSkeleton::ItemStringList *selectedPluginsItem;
    KConfigSkeleton::ItemColor *highlightColorItem;
    KConfigSkeleton::ItemColor *agendaBgColorItem;
    KConfigSkeleton::ItemFont *timeBarFontItem;
};

TestDPointer *TestDPointer::mSelf = 0;
static KStaticDeleter<TestDPointer> staticTestDPointerDeleter;

TestDPointer *TestDPointer::self()
{
  if ( !mSelf ) {
    staticTestDPointerDeleter.setObject( mSelf, new TestDPointer() );
    mSelf->readConfig();
  }

  return mSelf;
}

TestDPointer::TestDPointer(  )
  : KConfigSkeleton( TQString::fromLatin1( "korganizerrc" ) )
{
  d = new TestDPointerPrivate;
  mSelf = this;
  setCurrentGroup( TQString::fromLatin1( "General" ) );

  d->autoSaveItem = new KConfigSkeleton::ItemBool( currentGroup(), TQString::fromLatin1( "Auto Save" ), d->autoSave, false );
  d->autoSaveItem->setLabel( i18n("Enable automatic saving of calendar") );
  d->autoSaveItem->setWhatsThis( i18n("WhatsThis text for AutoSave option") );
  addItem( d->autoSaveItem, TQString::fromLatin1( "AutoSave" ) );
  d->autoSaveIntervalItem = new KConfigSkeleton::ItemInt( currentGroup(), TQString::fromLatin1( "Auto Save Interval" ), d->autoSaveInterval, 10 );
  d->autoSaveIntervalItem->setLabel( i18n("Auto Save Interval") );
  addItem( d->autoSaveIntervalItem, TQString::fromLatin1( "AutoSaveInterval" ) );
  d->confirmItem = new KConfigSkeleton::ItemBool( currentGroup(), TQString::fromLatin1( "Confirm Deletes" ), d->confirm, true );
  d->confirmItem->setLabel( i18n("Confirm deletes") );
  addItem( d->confirmItem, TQString::fromLatin1( "Confirm" ) );
  d->archiveFileItem = new KConfigSkeleton::ItemString( currentGroup(), TQString::fromLatin1( "Archive File" ), d->archiveFile );
  d->archiveFileItem->setLabel( i18n("Archive File") );
  addItem( d->archiveFileItem, TQString::fromLatin1( "ArchiveFile" ) );
  TQValueList<KConfigSkeleton::ItemEnum::Choice> valuesDestination;
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = TQString::fromLatin1( "standardDestination" );
    valuesDestination.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = TQString::fromLatin1( "askDestination" );
    valuesDestination.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = TQString::fromLatin1( "argl1" );
    choice.label = i18n("Argl1 Label");
    valuesDestination.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = TQString::fromLatin1( "argl2" );
    choice.whatsThis = i18n("Argl2 Whatsthis");
    valuesDestination.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = TQString::fromLatin1( "argl3" );
    choice.label = i18n("Argl3 Label");
    choice.whatsThis = i18n("Argl3 Whatsthis");
    valuesDestination.append( choice );
  }
  d->destinationItem = new KConfigSkeleton::ItemEnum( currentGroup(), TQString::fromLatin1( "Destination" ), d->destination, valuesDestination, EnumDestination::standardDestination );
  d->destinationItem->setLabel( i18n("New Events/Todos Should") );
  addItem( d->destinationItem, TQString::fromLatin1( "Destination" ) );

  setCurrentGroup( TQString::fromLatin1( "Views" ) );

  d->hourSizeItem = new KConfigSkeleton::ItemInt( currentGroup(), TQString::fromLatin1( "Hour Size" ), d->hourSize, 10 );
  d->hourSizeItem->setLabel( i18n("Hour Size") );
  addItem( d->hourSizeItem, TQString::fromLatin1( "HourSize" ) );
  d->selectionStartsEditorItem = new KConfigSkeleton::ItemBool( currentGroup(), TQString::fromLatin1( "SelectionStartsEditor" ), d->selectionStartsEditor, false );
  d->selectionStartsEditorItem->setLabel( i18n("Time range selection in agenda view starts event editor") );
  addItem( d->selectionStartsEditorItem, TQString::fromLatin1( "SelectionStartsEditor" ) );

  setCurrentGroup( TQString::fromLatin1( "KOrganizer Plugins" ) );

  TQStringList defaultSelectedPlugins;
  defaultSelectedPlugins.append( TQString::fromUtf8( "holidays" ) );
  defaultSelectedPlugins.append( TQString::fromUtf8( "webexport" ) );

  d->selectedPluginsItem = new KConfigSkeleton::ItemStringList( currentGroup(), TQString::fromLatin1( "SelectedPlugins" ), d->selectedPlugins, defaultSelectedPlugins );
  d->selectedPluginsItem->setLabel( i18n("SelectedPlugins") );
  addItem( d->selectedPluginsItem, TQString::fromLatin1( "SelectedPlugins" ) );

  setCurrentGroup( TQString::fromLatin1( "Colors" ) );

  d->highlightColorItem = new KConfigSkeleton::ItemColor( currentGroup(), TQString::fromLatin1( "Highlight Color" ), d->highlightColor, TQColor( 100, 100, 255 ) );
  d->highlightColorItem->setLabel( i18n("Highlight color") );
  addItem( d->highlightColorItem, TQString::fromLatin1( "HighlightColor" ) );
  d->agendaBgColorItem = new KConfigSkeleton::ItemColor( currentGroup(), TQString::fromLatin1( "Agenda Background Color" ), d->agendaBgColor, TQColor( 255, 255, 255 ) );
  d->agendaBgColorItem->setLabel( i18n("Agenda view background color") );
  addItem( d->agendaBgColorItem, TQString::fromLatin1( "AgendaBgColor" ) );

  setCurrentGroup( TQString::fromLatin1( "Fonts" ) );

  d->timeBarFontItem = new KConfigSkeleton::ItemFont( currentGroup(), TQString::fromLatin1( "TimeBar Font" ), d->timeBarFont );
  d->timeBarFontItem->setLabel( i18n("Time bar") );
  addItem( d->timeBarFontItem, TQString::fromLatin1( "TimeBarFont" ) );
}

void TestDPointer::setAutoSave( bool v )
{
      if (!self()->isImmutable( TQString::fromLatin1( "AutoSave" ) ))
        self()->d->autoSave = v;
}

bool TestDPointer::autoSave()
{
  return self()->d->autoSave;
}


KConfigSkeleton::ItemBool *TestDPointer::autoSaveItem()
{
  return d->autoSaveItem;
}

void TestDPointer::setAutoSaveInterval( int v )
{
      if (!self()->isImmutable( TQString::fromLatin1( "AutoSaveInterval" ) ))
        self()->d->autoSaveInterval = v;
}

int TestDPointer::autoSaveInterval()
{
  return self()->d->autoSaveInterval;
}


KConfigSkeleton::ItemInt *TestDPointer::autoSaveIntervalItem()
{
  return d->autoSaveIntervalItem;
}

void TestDPointer::setConfirm( bool v )
{
      if (!self()->isImmutable( TQString::fromLatin1( "Confirm" ) ))
        self()->d->confirm = v;
}

bool TestDPointer::confirm()
{
  return self()->d->confirm;
}


KConfigSkeleton::ItemBool *TestDPointer::confirmItem()
{
  return d->confirmItem;
}

void TestDPointer::setArchiveFile( const TQString & v )
{
      if (!self()->isImmutable( TQString::fromLatin1( "ArchiveFile" ) ))
        self()->d->archiveFile = v;
}

TQString TestDPointer::archiveFile()
{
  return self()->d->archiveFile;
}


KConfigSkeleton::ItemString *TestDPointer::archiveFileItem()
{
  return d->archiveFileItem;
}

void TestDPointer::setDestination( int v )
{
      if (!self()->isImmutable( TQString::fromLatin1( "Destination" ) ))
        self()->d->destination = v;
}

int TestDPointer::destination()
{
  return self()->d->destination;
}


KConfigSkeleton::ItemEnum *TestDPointer::destinationItem()
{
  return d->destinationItem;
}

void TestDPointer::setHourSize( int v )
{
      if (!self()->isImmutable( TQString::fromLatin1( "HourSize" ) ))
        self()->d->hourSize = v;
}

int TestDPointer::hourSize()
{
  return self()->d->hourSize;
}


KConfigSkeleton::ItemInt *TestDPointer::hourSizeItem()
{
  return d->hourSizeItem;
}

void TestDPointer::setSelectionStartsEditor( bool v )
{
      if (!self()->isImmutable( TQString::fromLatin1( "SelectionStartsEditor" ) ))
        self()->d->selectionStartsEditor = v;
}

bool TestDPointer::selectionStartsEditor()
{
  return self()->d->selectionStartsEditor;
}


KConfigSkeleton::ItemBool *TestDPointer::selectionStartsEditorItem()
{
  return d->selectionStartsEditorItem;
}

void TestDPointer::setSelectedPlugins( const TQStringList & v )
{
      if (!self()->isImmutable( TQString::fromLatin1( "SelectedPlugins" ) ))
        self()->d->selectedPlugins = v;
}

TQStringList TestDPointer::selectedPlugins()
{
  return self()->d->selectedPlugins;
}


KConfigSkeleton::ItemStringList *TestDPointer::selectedPluginsItem()
{
  return d->selectedPluginsItem;
}

void TestDPointer::setHighlightColor( const TQColor & v )
{
      if (!self()->isImmutable( TQString::fromLatin1( "HighlightColor" ) ))
        self()->d->highlightColor = v;
}

TQColor TestDPointer::highlightColor()
{
  return self()->d->highlightColor;
}


KConfigSkeleton::ItemColor *TestDPointer::highlightColorItem()
{
  return d->highlightColorItem;
}

void TestDPointer::setAgendaBgColor( const TQColor & v )
{
      if (!self()->isImmutable( TQString::fromLatin1( "AgendaBgColor" ) ))
        self()->d->agendaBgColor = v;
}

TQColor TestDPointer::agendaBgColor()
{
  return self()->d->agendaBgColor;
}


KConfigSkeleton::ItemColor *TestDPointer::agendaBgColorItem()
{
  return d->agendaBgColorItem;
}

void TestDPointer::setTimeBarFont( const TQFont & v )
{
      if (!self()->isImmutable( TQString::fromLatin1( "TimeBarFont" ) ))
        self()->d->timeBarFont = v;
}

TQFont TestDPointer::timeBarFont()
{
  return self()->d->timeBarFont;
}


KConfigSkeleton::ItemFont *TestDPointer::timeBarFontItem()
{
  return d->timeBarFontItem;
}

TestDPointer::~TestDPointer()
{
  delete d;
  if ( mSelf == this )
    staticTestDPointerDeleter.setObject( mSelf, 0, false );
}

